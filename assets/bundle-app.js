!function(e){var t={};function i(a){if(t[a])return t[a].exports;var s=t[a]={i:a,l:!1,exports:{}};return e[a].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=e,i.c=t,i.d=function(e,t,a){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(i.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)i.d(a,s,function(t){return e[t]}.bind(null,s));return a},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}([function(e,t,i){e.exports=i(1)},function(e,t,i){"use strict";i.r(t);var a=class{constructor(){this.templateCardDeck=[{symbol:"ETIQUETTE_1.png",faceup:!1,matched:!1},{symbol:"ETIQUETTE_1.png",faceup:!1,matched:!1},{symbol:"ETIQUETTE_2.png",faceup:!1,matched:!1},{symbol:"ETIQUETTE_2.png",faceup:!1,matched:!1},{symbol:"ETIQUETTE_3.png",faceup:!1,matched:!1},{symbol:"ETIQUETTE_3.png",faceup:!1,matched:!1},{symbol:"ETIQUETTE_4.png",faceup:!1,matched:!1},{symbol:"ETIQUETTE_4.png",faceup:!1,matched:!1},{symbol:"ETIQUETTE_5.png",faceup:!1,matched:!1},{symbol:"ETIQUETTE_5.png",faceup:!1,matched:!1},{symbol:"ETIQUETTE_6.png",faceup:!1,matched:!1},{symbol:"ETIQUETTE_6.png",faceup:!1,matched:!1},{symbol:"ETIQUETTE_7.png",faceup:!1,matched:!1},{symbol:"ETIQUETTE_7.png",faceup:!1,matched:!1},{symbol:"ETIQUETTE_8.png",faceup:!1,matched:!1},{symbol:"ETIQUETTE_8.png",faceup:!1,matched:!1}]}isSymbolMatch(e,t,i){return e[t].symbol===e[i].symbol}shuffle(){let e,t,i=this.templateCardDeck,a=i.length;for(;0!==a;)t=Math.floor(Math.random()*a),a-=1,e=i[a],i[a]=i[t],i[t]=e;return i}};var s=class{constructor(){this.deck=null,this.gameDeck=[],this.gameUI=null,this.playerRating=3,this.moveCount=0,this.flipCount=0,this.matchCount=0,this.firstCard=void 0,this.deckFragment=null,this.wait=e=>new Promise((t,i)=>setTimeout(t,e)),this.isTurnInprogress=!1}setDeck(e){this.deck=e}setGameUI(e){this.gameUI=e}getGameDeck(){return this.gameDeck}startNewGame(){this.playerRating=3,this.gameUI.updatePlayerRating(this.playerRating,3),this.moveCount=0,this.gameUI.updateMoveCount(this.moveCount),this.flipCount=0,this.matchCount=0,this.firstCard=void 0,this.gameDeck=this.deck.shuffle(),this.gameUI.buildDeck(this.gameDeck),this.gameDeck.forEach((e,t)=>{this.gameUI.turnCardFaceDown(t)}),this.gameUI.startTimer()}turn(e){return null!==e&&(this.firstCard!==e&&(!this.gameUI.isCardMatched(e)&&(!(this.flipCount>1)&&(this.gameUI.turnCardFaceUp(e),this.flipCount+=1,1===this.flipCount?this.firstCard=e:(this.moveCount+=1,this.gameUI.updateMoveCount(this.moveCount),this.deck.isSymbolMatch(this.gameDeck,this.firstCard,e)?this.pairMatched(this.firstCard,e):this.pairNotMatched(this.firstCard,e)),this.matchCount>=8&&(this.gameUI.stopTimer(),this.gameUI.showWinDialog(this,this.playerRating,this.moveCount),!0)))))}pairMatched(e,t){this.matchCount+=1,this.gameUI.markMatchedPair(e,t),this.firstCard=void 0,this.flipCount=0,this.playerRating=this.playerRating<3?this.playerRating+=1:this.playerRating,this.gameUI.updatePlayerRating(this.playerRating,3)}async pairNotMatched(e,t){await this.wait(1e3),this.gameUI.turnCardFaceDown(e),this.gameUI.turnCardFaceDown(t),this.firstCard=void 0,this.flipCount=0,this.playerRating=this.playerRating>0?this.playerRating-=1:this.playerRating,this.gameUI.updatePlayerRating(this.playerRating,3)}};var n=class{constructor(){this.gameTimer=null,this.gameTimerMinutes=0,this.gameTimerSeconds=0,this.secondsDOMElement=document.querySelector(".timer-seconds"),this.minutesDOMElement=document.querySelector(".timer-minutes")}buildDeck(e){const t=document.querySelector(".deck");if(t.childElementCount>0)for(;t.firstChild;)t.removeChild(t.firstChild);const i=document.createDocumentFragment();e.forEach((e,t)=>{const a=document.createElement("li");a.setAttribute("id",""+t),a.setAttribute("class","card");const s=document.createElement("img");s.setAttribute("src","/img/"+e.symbol),s.setAttribute("class","imghidden"),s.setAttribute("id","img"+t),a.appendChild(s),i.appendChild(a)}),t.appendChild(i)}turnCardFaceDown(e){document.getElementById(""+e).setAttribute("class","card");document.getElementById("img"+e).setAttribute("class","imghidden")}turnCardFaceUp(e){const t=document.getElementById(""+e),i=t.getAttribute("class")+" open faceup ";t.setAttribute("class",i);document.getElementById("img"+e).setAttribute("class","imgvisible ")}markMatchedPair(e,t){const i=document.getElementById(""+e);let a=i.getAttribute("class")+" match ";i.setAttribute("class",a);const s=document.getElementById(""+t);a=s.getAttribute("class")+" match",s.setAttribute("class",a),this.animateMatchedPair(i,s)}isCardMatched(e){return document.getElementById(""+e).getAttribute("class").includes("match")}animateMatchedPair(e,t){const i="animation-duration: 1s; animation-name: card-match;";e.setAttribute("style",i),t.setAttribute("style",i)}updateMoveCount(e){document.querySelector(".moves").innerText=e}updatePlayerRating(e,t){const i=document.querySelectorAll(".rating");for(let a=0;a<t;a+=1)e-a<=0?i[a].setAttribute("class","rating fa fa-star-o"):i[a].setAttribute("class","rating fa fa-star")}startTimer(){this.stopTimer(),this.gameTimerMinutes=0,this.minutesDOMElement.innerText="00",this.gameTimerSeconds=0,this.secondsDOMElement.innerText="00",this.gameTimer=setInterval(this.showNewTime,1e3,this)}showNewTime(e){e.gameTimerSeconds+=1,e.gameTimerSeconds>=60&&(e.gameTimerSeconds=0,e.gameTimerMinutes+=1,e.minutesDOMElement.innerText=("0"+e.gameTimerMinutes).slice(-2)),e.secondsDOMElement.innerText=("0"+e.gameTimerSeconds).slice(-2)}stopTimer(){null!==this.gameTimer&&(clearInterval(this.gameTimer),this.gameTimer=null)}showWinDialog(e,t,i){document.querySelector(".game-board").setAttribute("style","display: none"),document.querySelector(".win-minutes").innerText=this.gameTimerMinutes,document.querySelector(".win-seconds").innerText=this.gameTimerSeconds,document.querySelector(".win-moves").innerText=i,document.querySelector(".win-stars").innerText=t;const a=document.querySelector(".win-button");a.gamePlayRef=e,a.addEventListener("click",this.setupForNewGame),document.querySelector(".win-dialog").setAttribute("style","display: flex")}setupForNewGame(e){document.querySelector(".win-dialog").setAttribute("style","display: none"),document.querySelector(".game-board").setAttribute("style","display: flex"),e.target.gamePlayRef.startNewGame()}};const r=new a,c=new s,o=new n;c.setDeck(r),c.setGameUI(o),c.startNewGame();document.querySelector(".deck");document.querySelector(".deck").addEventListener("click",e=>{c.turn(e.target.getAttribute("id"))});document.querySelector(".restart").addEventListener("click",e=>{c.startNewGame()})}]);